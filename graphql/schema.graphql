# Auth requires cookie & csrf token

schema {
    query: Query
    mutation: Mutation
}

type Query {
    anime(term: String!): AnimeConnection
    singleAnime(id: ID!): Anime
    releaseSchedule(animeId: ID!, id: ID!): AnimeReleaseSchedule

    schedule(date: ISO8601Date!): ScheduleListings

    franchise(id: ID!): Franchise
    headlines: HeadlineConnection

    user(username: String!): PublicUser

    viewer: Viewer # Authed
    notificationCategories: NotificationCategory # Authed
    notifications: NotificationConnection # Authed
}

type Mutation { # Authed (obv)
    upsertLibraryEntry(
        animeId: ID!
        attributes: LibraryEntryAttributes!
        ratingScale: RatingScale
    ): LibraryEntryUpsertResult

    #unfavorite(id: ID!): RemoveFavoriteResult #TODO
    #favorite(id: ID!): AddFavoriteResult #TODO
}
type LibraryEntryUpsertResult {
    libraryEntry: ViewerLibraryEntry
}

#
# --- Anime +related ---
type AnimeConnection {
    nodes: [Anime]
}
type Anime {
    id: String
    databaseId: ID

    romajiTitle: String
    englishTitle: String
    nativeTitle: String
    alternativeTitles: [String]
    format: animeFormat
    originalLanguageCodes: [String]

    poster: OnTheFlyImage
    synopsis: AnimeSynopsis
    aggregateRating: AggregateRating
    tags: [ShallowTag]
    studios: [ShallowStudio]
    startDate: DateTimeWithPrecision
    endDate: DateTimeWithPrecision

    releaseStatus: releaseStatusType
    nextEpisode: ShallowEpisode
    releaseSchedules: AnimeReleaseScheduleConnection

    anidbUrl: String
    anilistUrl: String
    animePlanetUrl: String
    anisearchUrl: String
    annUrl: String
    kitsuUrl: String
    malUrl: String

    sourceMaterial: SourceMaterial
    sourceMaterialId: String
    editorNote: MarkdownText
    hasStreams: Boolean
    hasVideos: Boolean
    createdAt: ISO8601DateTime
    updatedAt: ISO8601DateTime

    viewerLibraryEntry: ViewerLibraryEntry # Authed
}

type OnTheFlyImage {
    url: String
    styles: [Style]
    urlTemplate: String
    cacheNamespace: String
}
type Style {
    name: String
    height: Int
    width: Int
    #formats: [StyleFormats] #TODO
}

type AnimeSynopsis {
    markdown: String
    source: String
    sourceUrl: String
    emended: Boolean
}

type MarkdownText {
    markdown: String
}
type ShallowTag {
    id: ID
    name: String
    hidden: String
    createdAt: ISO8601DateTime
    updatedAt: ISO8601DateTime
}
type ShallowStudio {
    id: ID!
    name: String
    websiteUrl: String
    websiteLabel: String
    facebookUrl: String
    youtubeUrl: String
    createdAt: ISO8601DateTime
    updatedAt: ISO8601DateTime
    foundedDate: DateWithPrecision
    defunctDate: DateWithPrecision
    logo: OnTheFlyImage
}
type AggregateRating {
    count: Int
    weightedValue: Float
}
type ShallowEpisode {
    id: String
    number: Int
    label: String
    airdate: ISO8601DateTime
}

#
# --- Release Schedule ---
type AnimeReleaseScheduleConnection {
    nodes: [AnimeReleaseSchedule]
}
type AnimeReleaseSchedule {
    animeId: String
    id: String
    title: String
    shortTitle: String
    description: MarkdownText

    releaseState: ReleaseScheduleState
    tracks: [ReleaseScheduleTrack]
    action: WebLink

    networkDatabaseId: String
    network: AnimeReleaseNetwork
    includeNetworkInShortTitle: Boolean

    startDate: DateTimeWithPrecision
    endDate: DateTimeWithPrecision
    createdAt: ISO8601DateTime
    updatedAt: ISO8601DateTime

    # Authed
    pinned: Boolean
    viewerNotificationsPreference: Boolean! # (default: false)
    pinnedByViewer: Boolean
    applicableToViewer: Boolean
    defaultForViewer: Boolean
}
type ReleaseScheduleState {
    id: Int
    databaseId: String
    animeDatabaseId: String
    releaseScheduleDatabaseId: String
    schedulingNote: SchedulingNote

    networkName: String
    networkShortName: String
    includeNetworkInShortTitle: Boolean

    scheduleTitle: String
    scheduleShortTitle: String

    releaseStatus: releaseStatusType
    previousRelease: EpisodeRange
    nextRelease: EpisodeRange
    nextReleasePlaceholder: EpisodeRangePlaceholder

    updatedAt: ISO8601DateTime
}
type SchedulingNote {
    id: String
    animeId: String
    releaseScheduleId: String

    sentiment: schedulingNoteSentiment
    gist: String
    message: MarkdownText
    action: WebLink

    releaseDate: ISO8601DateTime
    timeIsApproximate: Boolean

    createdAt: ISO8601DateTime
    updatedAt: ISO8601DateTime
}
type AnimeReleaseNetwork {
    databaseId: String
    name: String
    shortName: String
    #accentColorOnLight: Color
    #accentColorOnDark: Color
    updatedAt: ISO8601DateTime
}
type ReleaseScheduleTrack {
    id: String # json string "[{scheduleId}, {langId}, {type}]"
    type: MediaTrackType
    language: Language
    languageCode: String
    shortLabel: String
    category: String
}
type Language {
    id: String
    code: String
    name: String
    nativeName: String
    shortName: String
}
enum MediaTrackType {
    SUBTITLES
    AUDIO
}

#
# --- Schedule Episodes ---
type EpisodeRange {
    numberRange: EpisodeNumberRange
    date: ISO8601DateTime
    timeIsApproximate: Boolean
}
type EpisodeNumberRange {
    minNumber: Int
    minReleaseNumber: Int
    size: Int
    label: String
    lastOfAnime: Boolean
    lastOfSchedule: Boolean
}
type EpisodeRangePlaceholder {
    NumberRange: EpisodeNumberRange
    value: EpisodeRangePlaceholderValue
}

type WebLink { #err 500 when discovering
    url: String
    labelText: String
    iconMaskUrl: String
}
type SourceMaterial {
    id: String
    name: String
    createdAt: ISO8601DateTime
    updatedAt: ISO8601DateTime
}

type AnimeVideoConnection {
    nodes: [AnimeVideo]
}
type AnimeVideo { #TODO: find other keys
    title: String
}

#
# --- Schedule/Timetable ---
type ScheduleListings { #TODO
    __typename: String
}

#
# --- Franchise ---
type Franchise {
    favoriteCount: Int!
    viewerHasFavorited: Boolean # Authed
    aggregateRating: AggregateRating
    headlines: HeadlineConnection
    installments: FranchiseInstallmentConnection
}
type FranchiseInstallmentConnection {
    nodes: FranchiseInstallment
}
type FranchiseInstallment {
    anime: Anime
}

#
# --- Headlines --- #TODO
type HeadlineConnection {
    nodes: Headline
}
type Headline {
    id: String
    title: String
    subTitle: String
    thumbnail: OnTheFlyImage

    targetHost: String
    targetUrl: String

    sponsored: Boolean
    edited: Boolean
    pinned: Boolean # errored
    updatedAt: String
    createdAt: ISO8601DateTime
}

#
# --- User Info ---
type Viewer {
    id: ID!
    username: String!
    updatedAt: ISO8601DateTime!
    createdAt: ISO8601DateTime!
    email: String
    unconfirmedEmail: String
    library: ViewerLibraryEntryConnection
    notificationMetadata: UserNotificationMetadata
}
type ViewerLibraryEntryConnection {
    nodes: [ViewerLibraryEntry]
}
type ViewerLibraryEntry {
    id: String!
    animeId: String
    animeDatabaseId: String
    status: LibraryEntryStatus!
    episodesWatched: Int!
    rewatches: Int!
    rating: RatingScale
    startedAt: ISO8601Date
    finishedAt: ISO8601Date
    notes: String
}
type LibraryEntryAttributes {
    status: LibraryEntryStatus
    rating: Float
    episodesWatched: Int
    startedAt: ISO8601DateTime
    finishedAt: ISO8601DateTime
    rewatches: Int
    notes: String
}

type PublicUser {
    username: String!
    id: ID!
    createdAt: ISO8601DateTime!
    library(
        statuses: [LibraryEntryStatus]
        sort: LibraryEntrySort
    ): PublicLibraryEntryConnection
}
type PublicLibraryEntryConnection {
    nodes: [PublicLibraryEntry]
}
type PublicLibraryEntry {
    animeId: Int
    status: LibraryEntryStatus
    rating: Float
    episodesWatched: Int
    anime: Anime
    updatedAt: ISO8601DateTime
    createdAt: ISO8601DateTime
}

#
type DateTimeWithPrecision {
    value: ISO8601DateTime
    precision: DateTimePrecision
}
type DateWithPrecision {
    value: ISO8601Date
    precision: DatePrecision
}

type ApproximateReleaseMessage { #TODO: check if valid
    body: String
}
type ReleaseSeason { #TODO: check if valid
    title: String
    slug: String
    # yearQuarter:
    startDate: ISO8601DateTime
    endDate: ISO8601DateTime
}

#
# --- Notifications ---
type UserNotificationMetadata {
    unreadCount: Int
}
type NotificationCategory {
    databaseId: String
    id: String
    name: String
    displayName: String

    viewerUnreadCount: Int
}
type NotificationConnection {
    nodes: [Notification]
}
type Notification { #TODO: find key for notification title
    id: String
    createdAt: ISO8601DateTime
    status: NotificationMarkStatus
    category: NotificationCategory
}
enum NotificationMarkStatus {
    UNREAD
    READ
}

#
# --- Enums +Misc ---
union ID = String | Int
union EpisodeRangePlaceholderValue =
      ApproximateReleaseMessage
    | ReleaseSeason
    | DateWithPrecision
    | DateTimeWithPrecision

type LibraryEntrySort {
    algorithm: LibraryEntrySortingAlgorithm!
    direction: OrderDirection
}

enum LibraryEntrySortingAlgorithm { #TODO: find others
    NEXT_EPISODE_COUNTDOWN
    AVERAGE_RATING
    ANIME_TITLE
    UPDATED_AT
}
enum OrderDirection {
    ASC
    DESC
}
enum animeFormat { #TODO: check if valid
    # Unknown
    TV
    # Movie
    # OVA
    # Web
    # Special
    # TV Short
    # TV Special
    # Web Short
}
enum schedulingNoteSentiment { #TODO: find other values?
    NEGATIVE
}
enum releaseStatusType {
    NOT_YET_RELEASED
    RELEASING
    FINISHED
}

enum LibraryEntryStatus {
    PLANNING
    PAUSED
    WATCHING
    REWATCHING
    CONSIDERING
    DROPPED
    COMPLETED
    SKIPPING
}

# WIP
enum RatingScale {
    RATING_10
}

enum DatePrecision {
    FULL
}

enum DateTimePrecision {
    DATE_AND_TIME
    DATE
    MONTH_AND_YEAR
    YEAR
    NONE
}

enum TitleLanguage {
    ROMAJI
    NATIVE
    ENGLISH
}

scalar ISO8601Date
scalar ISO8601DateTime
scalar TimeZoneName
